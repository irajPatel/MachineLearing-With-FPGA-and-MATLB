// -------------------------------------------------------------
// 
// File Name: hdlsrc\DNN\DNNModel.v
// Created: 2024-09-19 22:24:12
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.1
// Target subsystem base rate: 0.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DNNModel
// Source Path: DNN/DNNModel
// Hierarchy Level: 0
// Model version: 1.53
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DNNModel
          (X_0,
           X_1,
           X_2,
           X_3,
           X_4,
           X_5,
           X_6,
           yprd);


  input   signed [11:0] X_0;  // sfix12_En11
  input   signed [11:0] X_1;  // sfix12_En11
  input   signed [11:0] X_2;  // sfix12_En11
  input   signed [11:0] X_3;  // sfix12_En11
  input   signed [11:0] X_4;  // sfix12_En11
  input   signed [11:0] X_5;  // sfix12_En11
  input   signed [11:0] X_6;  // sfix12_En11
  output  yprd;  // ufix1


  wire signed [1:0] bias3_out1;  // sfix2_En2
  wire signed [6:0] weight_3_out1 [0:3];  // sfix7_En4 [4]
  wire signed [8:0] bias2_out1 [0:3];  // sfix9_En6 [4]
  wire signed [9:0] c32_weight_2_out1 [0:11];  // sfix10_En7 [12]
  wire signed [9:0] weight_2_out1 [0:3] [0:2];  // sfix10_En7 [4x3]
  wire signed [4:0] bias_out1 [0:2];  // sfix5_En3 [3]
  wire signed [9:0] c30_weight_1_out1 [0:20];  // sfix10_En7 [21]
  wire signed [9:0] weight_1_out1 [0:2] [0:6];  // sfix10_En7 [3x7]
  wire signed [15:0] ytan_0;  // sfix16_En14
  wire signed [15:0] ytan_1;  // sfix16_En14
  wire signed [15:0] ytan_2;  // sfix16_En14
  wire signed [15:0] ytan_0_1;  // sfix16_En14
  wire signed [15:0] ytan_1_1;  // sfix16_En14
  wire signed [15:0] ytan_2_1;  // sfix16_En14
  wire signed [15:0] ytan_3;  // sfix16_En14
  wire signed [15:0] ySig;  // sfix16_En14
  wire Constant_out1;  // ufix1_En1


  assign bias3_out1 = 2'sb11;



  assign weight_3_out1[0] = 7'sb1111000;
  assign weight_3_out1[1] = 7'sb1010011;
  assign weight_3_out1[2] = 7'sb0011101;
  assign weight_3_out1[3] = 7'sb1011111;



  assign bias2_out1[0] = 9'sb101110110;
  assign bias2_out1[1] = 9'sb001010001;
  assign bias2_out1[2] = 9'sb111001010;
  assign bias2_out1[3] = 9'sb010000010;



  assign c32_weight_2_out1[0] = 10'sb0000101000;
  assign c32_weight_2_out1[1] = 10'sb1110000011;
  assign c32_weight_2_out1[2] = 10'sb1011111111;
  assign c32_weight_2_out1[3] = 10'sb0000101000;
  assign c32_weight_2_out1[4] = 10'sb0100100000;
  assign c32_weight_2_out1[5] = 10'sb0100001100;
  assign c32_weight_2_out1[6] = 10'sb0000101101;
  assign c32_weight_2_out1[7] = 10'sb0100100111;
  assign c32_weight_2_out1[8] = 10'sb0000100111;
  assign c32_weight_2_out1[9] = 10'sb0001101111;
  assign c32_weight_2_out1[10] = 10'sb1110001100;
  assign c32_weight_2_out1[11] = 10'sb1111101100;



  generate
    genvar idx3;
    for(idx3 = 0; idx3 < 3; idx3 = idx3 + 1) begin : weight_2_out1_gen1
      genvar idx2;
      for(idx2 = 0; idx2 < 4; idx2 = idx2 + 1) begin : weight_2_out1_gen
        assign weight_2_out1[idx2][idx3] = c32_weight_2_out1[idx2 + (idx3 * 4)];
      end
    end
  endgenerate

  assign bias_out1[0] = 5'sb01110;
  assign bias_out1[1] = 5'sb00011;
  assign bias_out1[2] = 5'sb10101;



  assign c30_weight_1_out1[0] = 10'sb1111000101;
  assign c30_weight_1_out1[1] = 10'sb1000101011;
  assign c30_weight_1_out1[2] = 10'sb1110111100;
  assign c30_weight_1_out1[3] = 10'sb1111011100;
  assign c30_weight_1_out1[4] = 10'sb0000110001;
  assign c30_weight_1_out1[5] = 10'sb0000100011;
  assign c30_weight_1_out1[6] = 10'sb1110100001;
  assign c30_weight_1_out1[7] = 10'sb0000010111;
  assign c30_weight_1_out1[8] = 10'sb0000000010;
  assign c30_weight_1_out1[9] = 10'sb0001011001;
  assign c30_weight_1_out1[10] = 10'sb1111100011;
  assign c30_weight_1_out1[11] = 10'sb0000100001;
  assign c30_weight_1_out1[12] = 10'sb1111011101;
  assign c30_weight_1_out1[13] = 10'sb1101001110;
  assign c30_weight_1_out1[14] = 10'sb1110000100;
  assign c30_weight_1_out1[15] = 10'sb1101110110;
  assign c30_weight_1_out1[16] = 10'sb1101100001;
  assign c30_weight_1_out1[17] = 10'sb1110010010;
  assign c30_weight_1_out1[18] = 10'sb1111000011;
  assign c30_weight_1_out1[19] = 10'sb1110100001;
  assign c30_weight_1_out1[20] = 10'sb1101100010;



  generate
    genvar idx1;
    for(idx1 = 0; idx1 < 7; idx1 = idx1 + 1) begin : weight_1_out1_gen1
      genvar idx;
      for(idx = 0; idx < 3; idx = idx + 1) begin : weight_1_out1_gen
        assign weight_1_out1[idx][idx1] = c30_weight_1_out1[idx + (idx1 * 3)];
      end
    end
  endgenerate

  HiddenLayer1 u_HiddenLayer1 (.Bias_0(bias_out1[0]),  // sfix5_En3
                               .Bias_1(bias_out1[1]),  // sfix5_En3
                               .Bias_2(bias_out1[2]),  // sfix5_En3
                               .Weight_0(weight_1_out1[0][0]),  // sfix10_En7
                               .Weight_1(weight_1_out1[1][0]),  // sfix10_En7
                               .Weight_2(weight_1_out1[2][0]),  // sfix10_En7
                               .Weight_3(weight_1_out1[0][1]),  // sfix10_En7
                               .Weight_4(weight_1_out1[1][1]),  // sfix10_En7
                               .Weight_5(weight_1_out1[2][1]),  // sfix10_En7
                               .Weight_6(weight_1_out1[0][2]),  // sfix10_En7
                               .Weight_7(weight_1_out1[1][2]),  // sfix10_En7
                               .Weight_8(weight_1_out1[2][2]),  // sfix10_En7
                               .Weight_9(weight_1_out1[0][3]),  // sfix10_En7
                               .Weight_10(weight_1_out1[1][3]),  // sfix10_En7
                               .Weight_11(weight_1_out1[2][3]),  // sfix10_En7
                               .Weight_12(weight_1_out1[0][4]),  // sfix10_En7
                               .Weight_13(weight_1_out1[1][4]),  // sfix10_En7
                               .Weight_14(weight_1_out1[2][4]),  // sfix10_En7
                               .Weight_15(weight_1_out1[0][5]),  // sfix10_En7
                               .Weight_16(weight_1_out1[1][5]),  // sfix10_En7
                               .Weight_17(weight_1_out1[2][5]),  // sfix10_En7
                               .Weight_18(weight_1_out1[0][6]),  // sfix10_En7
                               .Weight_19(weight_1_out1[1][6]),  // sfix10_En7
                               .Weight_20(weight_1_out1[2][6]),  // sfix10_En7
                               .X_0(X_0),  // sfix12_En11
                               .X_1(X_1),  // sfix12_En11
                               .X_2(X_2),  // sfix12_En11
                               .X_3(X_3),  // sfix12_En11
                               .X_4(X_4),  // sfix12_En11
                               .X_5(X_5),  // sfix12_En11
                               .X_6(X_6),  // sfix12_En11
                               .ytan_0(ytan_0),  // sfix16_En14
                               .ytan_1(ytan_1),  // sfix16_En14
                               .ytan_2(ytan_2)  // sfix16_En14
                               );

  Hidden_Layer2 u_Hidden_Layer2 (.Bias_0(bias2_out1[0]),  // sfix9_En6
                                 .Bias_1(bias2_out1[1]),  // sfix9_En6
                                 .Bias_2(bias2_out1[2]),  // sfix9_En6
                                 .Bias_3(bias2_out1[3]),  // sfix9_En6
                                 .Weight_0(weight_2_out1[0][0]),  // sfix10_En7
                                 .Weight_1(weight_2_out1[1][0]),  // sfix10_En7
                                 .Weight_2(weight_2_out1[2][0]),  // sfix10_En7
                                 .Weight_3(weight_2_out1[3][0]),  // sfix10_En7
                                 .Weight_4(weight_2_out1[0][1]),  // sfix10_En7
                                 .Weight_5(weight_2_out1[1][1]),  // sfix10_En7
                                 .Weight_6(weight_2_out1[2][1]),  // sfix10_En7
                                 .Weight_7(weight_2_out1[3][1]),  // sfix10_En7
                                 .Weight_8(weight_2_out1[0][2]),  // sfix10_En7
                                 .Weight_9(weight_2_out1[1][2]),  // sfix10_En7
                                 .Weight_10(weight_2_out1[2][2]),  // sfix10_En7
                                 .Weight_11(weight_2_out1[3][2]),  // sfix10_En7
                                 .X_0(ytan_0),  // sfix16_En14
                                 .X_1(ytan_1),  // sfix16_En14
                                 .X_2(ytan_2),  // sfix16_En14
                                 .ytan_0(ytan_0_1),  // sfix16_En14
                                 .ytan_1(ytan_1_1),  // sfix16_En14
                                 .ytan_2(ytan_2_1),  // sfix16_En14
                                 .ytan_3(ytan_3)  // sfix16_En14
                                 );

  OutputLayer u_OutputLayer (.Bias(bias3_out1),  // sfix2_En2
                             .Weight_0(weight_3_out1[0]),  // sfix7_En4
                             .Weight_1(weight_3_out1[1]),  // sfix7_En4
                             .Weight_2(weight_3_out1[2]),  // sfix7_En4
                             .Weight_3(weight_3_out1[3]),  // sfix7_En4
                             .X_0(ytan_0_1),  // sfix16_En14
                             .X_1(ytan_1_1),  // sfix16_En14
                             .X_2(ytan_2_1),  // sfix16_En14
                             .X_3(ytan_3),  // sfix16_En14
                             .ySig(ySig)  // sfix16_En14
                             );

  assign Constant_out1 = 1'b1;



  MATLAB_Function u_MATLAB_Function (.u(ySig),  // sfix16_En14
                                     .Thresh(Constant_out1),  // ufix1_En1
                                     .yprd(yprd)  // ufix1
                                     );

endmodule  // DNNModel

